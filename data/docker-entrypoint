#!/usr/bin/env bash

function prepare-env () {

  DB_TYPE=${DB_TYPE:-}
  DB_HOST=${DB_HOST:-}
  DB_PORT=${DB_PORT:-}
  DB_NAME=${DB_NAME:-}
  DB_USER=${DB_USER:-}
  DB_PASS=${DB_PASS:-}

  #GITLAB_MAX_SIZE=$(echo $MAX_UPLOAD_SIZE |sed -e "s/^ *\([0-9]*\)[mMkKgG] *$/\1/g" )
  #case "$NGINX_MAX_UPLOAD_SIZE" in
  #  *[kK] ) GITLAB_MAX_SIZE=$(($GITLAB_MAX_SIZE * 1024));;
  #  *[mM] ) GITLAB_MAX_SIZE=$(($GITLAB_MAX_SIZE * 1048576));;
  #  *[gG] ) GITLAB_MAX_SIZE=$(($GITLAB_MAX_SIZE * 1073741824));;
  #esac

  if [ -n "${MYSQL_PORT_3306_TCP_ADDR}" ]; then
    DB_TYPE=${DB_TYPE:-mysql}
    DB_HOST=${DB_HOST:-${MYSQL_PORT_3306_TCP_ADDR}}
    DB_PORT=${DB_PORT:-${MYSQL_PORT_3306_TCP_PORT}}

    # support for linked official mysql image
    DB_USER=${DB_USER:-${MYSQL_ENV_MYSQL_USER}}
    DB_PASS=${DB_PASS:-${MYSQL_ENV_MYSQL_PASSWORD}}
    DB_NAME=${DB_NAME:-${DB_USER}}

    # support for linked sameersbn/mysql image
    DB_USER=${DB_USER:-${MYSQL_ENV_DB_USER}}
    DB_PASS=${DB_PASS:-${MYSQL_ENV_DB_PASS}}
    DB_NAME=${DB_NAME:-${MYSQL_ENV_DB_NAME}}

    # support for linked orchardup/mysql and enturylink/mysql image
    # also supports official mysql image
    DB_USER=${DB_USER:-${MYSQL_ENV_MYSQL_USER}}
    DB_PASS=${DB_PASS:-${MYSQL_ENV_MYSQL_PASSWORD}}
    DB_NAME=${DB_NAME:-${MYSQL_ENV_MYSQL_DATABASE}}
  elif [ -n "${POSTGRES_PORT_5432_TCP_ADDR}" ]; then
    DB_TYPE=${DB_TYPE:-pgsql}
    DB_HOST=${DB_HOST:-${POSTGRES_PORT_5432_TCP_ADDR}}
    DB_PORT=${DB_PORT:-${POSTGRES_PORT_5432_TCP_PORT}}

    # support for linked official postgres image
    DB_USER=${DB_USER:-${POSTGRES_ENV_POSTGRES_USER}}
    DB_PASS=${DB_PASS:-${POSTGRES_ENV_POSTGRES_PASSWORD}}
    DB_NAME=${DB_NAME:-${DB_USER}}

    # support for linked sameersbn/postgresql image
    DB_USER=${DB_USER:-${POSTGRES_ENV_DB_USER}}
    DB_PASS=${DB_PASS:-${POSTGRES_ENV_DB_PASS}}
    DB_NAME=${DB_NAME:-${POSTGRES_ENV_DB_NAME}}

    # support for linked orchardup/postgresql image
    DB_USER=${DB_USER:-${POSTGRES_ENV_POSTGRESQL_USER}}
    DB_PASS=${DB_PASS:-${POSTGRES_ENV_POSTGRESQL_PASS}}
    DB_NAME=${DB_NAME:-${POSTGRES_ENV_POSTGRESQL_DB}}

    # support for linked paintedfox/postgresql image
    DB_USER=${DB_USER:-${POSTGRES_ENV_USER}}
    DB_PASS=${DB_PASS:-${POSTGRES_ENV_PASS}}
    DB_NAME=${DB_NAME:-${POSTGRES_ENV_DB}}
  fi

  #if [ -z "${DB_HOST}" ]; then
  #  echo "ERROR: "
  #  echo "  Please configure the database connection."
  #  echo "  Refer http://git.io/wkYhyA for more information."
  #  echo "  Cannot continue without a database. Aborting..."
  #  exit 1
  #fi
  #
  ## use default port number if it is still not set
  #case "${DB_TYPE}" in
  #  mysql) DB_PORT=${DB_PORT:-3306} ;;
  #  postgres) DB_PORT=${DB_PORT:-5432} ;;
  #  *)
  #    echo "ERROR: "
  #    echo "  Please specify the database type in use via the DB_TYPE configuration option."
  #    echo "  Accepted values are \"postgres\" or \"mysql\". Aborting..."
  #    exit 1
  #    ;;
  #esac

  export MAX_UPLOAD_SIZE
  export DB_TYPE=${DB_TYPE:-sqlite3}
  export DB_HOST=${DB_HOST:-localhost}
  export DB_PORT=${DB_PORT:-}
  export DB_NAME=${DB_NAME:-owncloud}
  export DB_USER=${DB_USER:-owncloud}
  export DB_PASS=${DB_PASS:-owncloud}
  export DB_TABLE_PREFIX=${DB_TABLE_PREFIX:-oc_}
  export ADMIN_USER=${ADMIN_USER:-admin}
  export ADMIN_PASS=${ADMIN_PASS:-changeme}
  export DATA_DIR=${DATA_DIR:-/var/www/owncloud/data}
}

function load-entrypoint.d () {
  if [ -d /docker-entrypoint.d ]; then
    for f in /docker-entrypoint.d/*.sh; do
      [ -f "$f" ] && . "$f"
    done
  fi
}

function replace-all-env-vars () {
  # Work with either `cat /file | replace-all-env-vars` and
  # `replace-all-env-vars /file`
  [ $# -ge 1 -a -f "$1" ] && input="$1" || input="-"
  local contents=$(cat $input)

  # Loop through each environment variable name
  for v in $(env | cut -d '=' -f1); do
    # Only look for things like `__PATH__`
    local needle="__${v}__"
    if [[ "${contents}" =~ "${needle}" ]]; then
      # Replace all instances of needle with the value of `$v`
      contents="${contents//$needle/${!v}}"
    fi
  done

  echo "${contents}"
}

function create-autoconfig () {
  cat > "${OWNCLOUD_AUTOCONFIG}" <<-EOF
<?php
\$AUTOCONFIG = array (
  'dbtype' => '$DB_TYPE',
  'dbhost' => '$DB_HOST',
  'dbname' => '$DB_NAME',
  'dbuser' => '$DB_USER',
  'dbpass' => '$DB_PASS',
  'dbtableprefix' => '$DB_TABLE_PREFIX',
  'adminlogin' => '$ADMIN_USER',
  'adminpass' => '$ADMIN_PASS',
  'directory' => '$DATA_DIR',
);
EOF

  chown www-data:www-data "${OWNCLOUD_AUTOCONFIG}"
}

function create-config () {
  cat > "${OWNCLOUD_CONFIG}" <<-EOF
<?php
\$CONFIG = array (
  'apps_paths' => array(
    array(
      'path'=> '/var/www/owncloud/apps',
      'url' => '/apps',
      'writable' => true,
    ),
    array(
      'path'=> '/var/www/owncloud/user-apps',
      'url' => '/user-apps',
      'writable' => false,
    ),
  ),
);
EOF

  chown www-data:www-data "${OWNCLOUD_CONFIG}"
}

function set-upload-size () {
  sed -E -i "s/upload_max_filesize = .*/upload_max_filesize = ${MAX_UPLOAD_SIZE}/" /etc/php5/fpm/php.ini
  sed -E -i "s/post_max_size = .*/post_max_size = ${MAX_UPLOAD_SIZE}/" /etc/php5/fpm/php.ini
  sed -E -i "s/client_max_body_size .*;/client_max_body_size ${MAX_UPLOAD_SIZE};/" /etc/nginx/nginx.conf

  grep '^php_value\[post_max_size\]' /etc/php5/fpm/pool.d/www.conf || echo "php_value[post_max_size] = ${MAX_UPLOAD_SIZE}" >> /etc/php5/fpm/pool.d/www.conf
  grep '^php_value\[upload_max_filesize\]' /etc/php5/fpm/pool.d/www.conf || echo "php_value[upload_max_filesize] = ${MAX_UPLOAD_SIZE}" >> /etc/php5/fpm/pool.d/www.conf
}

function fix-raw-post-data () {
  grep '^always_populate_raw_post_data' /etc/php5/fpm/php.ini || echo "always_populate_raw_post_data = -1" >> /etc/php5/fpm/php.ini
  grep '^always_populate_raw_post_data' /etc/php5/cli/php.ini || echo "always_populate_raw_post_data = -1" >> /etc/php5/cli/php.ini
}

function modify-config () {
  sed -E -i "s/'dbtype' => '.*'/'dbtype' => '${DB_TYPE}'/" "${OWNCLOUD_CONFIG}"
  sed -E -i "s/'dbname' => '.*'/'dbname' => '${DB_NAME}'/" "${OWNCLOUD_CONFIG}"
  sed -E -i "s/'dbuser' => '.*'/'dbuser' => '${DB_USER}'/" "${OWNCLOUD_CONFIG}"
  sed -E -i "s/'dbpassword' => '.*'/'dbpassword' => '${DB_PASS}'/" "${OWNCLOUD_CONFIG}"
  sed -E -i "s/'dbhost' => '.*'/'dbhost' => '${DB_HOST}'/" "${OWNCLOUD_CONFIG}"
  sed -E -i "s/'dbtableprefix' => '.*'/'dbtableprefix' => '${DB_TABLE_PREFIX}'/" "${OWNCLOUD_CONFIG}"

  if [ -f "${OWNCLOUD_AUTOCONFIG}" ]; then
    sed -E -i "s/'dbtype' => '.*'/'dbtype' => '${DB_TYPE}'/" "${OWNCLOUD_AUTOCONFIG}"
    sed -E -i "s/'dbname' => '.*'/'dbname' => '${DB_NAME}'/" "${OWNCLOUD_AUTOCONFIG}"
    sed -E -i "s/'dbuser' => '.*'/'dbuser' => '${DB_USER}'/" "${OWNCLOUD_AUTOCONFIG}"
    sed -E -i "s/'dbpass' => '.*'/'dbpass' => '${DB_PASS}'/" "${OWNCLOUD_AUTOCONFIG}"
    sed -E -i "s/'dbhost' => '.*'/'dbhost' => '${DB_HOST}'/" "${OWNCLOUD_AUTOCONFIG}"
    sed -E -i "s/'dbtableprefix' => '.*'/'dbtableprefix' => '${DB_TABLE_PREFIX}'/" "${OWNCLOUD_AUTOCONFIG}"
  fi
}

prepare-env

OWNCLOUD_CONFIG=/var/www/owncloud/config/config.php
OWNCLOUD_AUTOCONFIG=/var/www/owncloud/config/autoconfig.php
if [ ! -f "${OWNCLOUD_CONFIG}" ]; then
  create-autoconfig
  create-config
fi

modify-config
set-upload-size
fix-raw-post-data
load-entrypoint.d
chown -R www-data:www-data /var/www/owncloud
exec "$@"
