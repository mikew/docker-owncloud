#!/usr/bin/env bash

OWNCLOUD_CONFIG=/var/www/owncloud/config/config.php
DOCKER_OWNCLOUD_CONFIG=/var/www/owncloud/config/docker_config.php
#OWNCLOUD_AUTOCONFIG=/var/www/owncloud/config/autoconfig.php
MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE:-30G}
DB_TABLE_PREFIX=${DB_TABLE_PREFIX:-oc_}
ADMIN_USER=${ADMIN_USER:-admin}
ADMIN_PASS=${ADMIN_PASS:-changeme}
DATA_DIR=${DATA_DIR:-/var/www/owncloud/data}
TRUSTED_DOMAIN=${TRUSTED_DOMAIN:-${VIRTUAL_HOST:-}}
ENABLE_EXTRA_PREVIEW_PROVIDERS=${ENABLE_EXTRA_PREVIEW_PROVIDERS:-true}
MAIN_PID=-2
DB_TYPE=${DB_TYPE:-}
DB_HOST=${DB_HOST:-}
DB_PORT=${DB_PORT:-}
DB_NAME=${DB_NAME:-}
DB_USER=${DB_USER:-}
DB_PASS=${DB_PASS:-}

if [ -n "${MYSQL_PORT_3306_TCP_ADDR}" ]; then
  DB_TYPE=${DB_TYPE:-mysql}
  DB_HOST=${DB_HOST:-${MYSQL_PORT_3306_TCP_ADDR}}
  DB_PORT=${DB_PORT:-${MYSQL_PORT_3306_TCP_PORT}}

  # support for linked official mysql image
  DB_USER=${DB_USER:-${MYSQL_ENV_MYSQL_USER}}
  DB_PASS=${DB_PASS:-${MYSQL_ENV_MYSQL_PASSWORD}}
  DB_NAME=${DB_NAME:-${DB_USER}}

  # support for linked sameersbn/mysql image
  DB_USER=${DB_USER:-${MYSQL_ENV_DB_USER}}
  DB_PASS=${DB_PASS:-${MYSQL_ENV_DB_PASS}}
  DB_NAME=${DB_NAME:-${MYSQL_ENV_DB_NAME}}

  # support for linked orchardup/mysql and enturylink/mysql image
  # also supports official mysql image
  DB_USER=${DB_USER:-${MYSQL_ENV_MYSQL_USER}}
  DB_PASS=${DB_PASS:-${MYSQL_ENV_MYSQL_PASSWORD}}
  DB_NAME=${DB_NAME:-${MYSQL_ENV_MYSQL_DATABASE}}
elif [ -n "${POSTGRES_PORT_5432_TCP_ADDR}" ]; then
  DB_TYPE=${DB_TYPE:-pgsql}
  DB_HOST=${DB_HOST:-${POSTGRES_PORT_5432_TCP_ADDR}}
  DB_PORT=${DB_PORT:-${POSTGRES_PORT_5432_TCP_PORT}}

  # support for linked official postgres image
  DB_USER=${DB_USER:-${POSTGRES_ENV_POSTGRES_USER}}
  DB_PASS=${DB_PASS:-${POSTGRES_ENV_POSTGRES_PASSWORD}}
  DB_NAME=${DB_NAME:-${DB_USER}}

  # support for linked sameersbn/postgresql image
  DB_USER=${DB_USER:-${POSTGRES_ENV_DB_USER}}
  DB_PASS=${DB_PASS:-${POSTGRES_ENV_DB_PASS}}
  DB_NAME=${DB_NAME:-${POSTGRES_ENV_DB_NAME}}

  # support for linked orchardup/postgresql image
  DB_USER=${DB_USER:-${POSTGRES_ENV_POSTGRESQL_USER}}
  DB_PASS=${DB_PASS:-${POSTGRES_ENV_POSTGRESQL_PASS}}
  DB_NAME=${DB_NAME:-${POSTGRES_ENV_POSTGRESQL_DB}}

  # support for linked paintedfox/postgresql image
  DB_USER=${DB_USER:-${POSTGRES_ENV_USER}}
  DB_PASS=${DB_PASS:-${POSTGRES_ENV_PASS}}
  DB_NAME=${DB_NAME:-${POSTGRES_ENV_DB}}
fi

DB_TYPE=${DB_TYPE:-sqlite3}
DB_HOST=${DB_HOST:-localhost}
DB_PORT=${DB_PORT:-}
DB_NAME=${DB_NAME:-owncloud}
DB_USER=${DB_USER:-owncloud}
DB_PASS=${DB_PASS:-owncloud}

function main () {
  create-config
  create-docker-config
  modify-trusted-domains
  include-docker-config
  download-owncloud-certs
  set-upload-size
  fix-raw-post-data
  fix-apc-enable_cli
  fix-clear_env
  fix-permissions
  install-and-upgrade
  include-docker-config
  load-entrypoint.d

  trap teardown SIGTERM SIGINT
  "$@" &
  MAIN_PID=$!
  wait $MAIN_PID
}

function teardown () {
  kill -- $MAIN_PID
  wait -- $MAIN_PID
}

function load-entrypoint.d () {
  if [ -d /docker-entrypoint.d ]; then
    for f in /docker-entrypoint.d/*.sh; do
      [ -f "$f" ] && . "$f"
    done
  fi
}

function create-config () {
  [ -f "${OWNCLOUD_CONFIG}" ] && return

  cat > "${OWNCLOUD_CONFIG}" <<-EOF
<?php
\$CONFIG = array (
  'memcache.local' => '\OC\Memcache\APCu',

  'apps_paths' => array(
    array(
      'path'=> '/var/www/owncloud/apps',
      'url' => '/apps',
      'writable' => true,
    ),

    array(
      'path'=> '/var/www/owncloud/user-apps',
      'url' => '/user-apps',
      'writable' => false,
    ),
  ),

  'asset-pipeline.enabled' => true,

);
EOF

  chown www-data:www-data "${OWNCLOUD_CONFIG}"
}

function set-upload-size () {
  sed -E -i "s/upload_max_filesize = .*/upload_max_filesize = ${MAX_UPLOAD_SIZE}/" /etc/php5/fpm/php.ini
  sed -E -i "s/post_max_size = .*/post_max_size = ${MAX_UPLOAD_SIZE}/" /etc/php5/fpm/php.ini
  sed -E -i "s/client_max_body_size .*;/client_max_body_size ${MAX_UPLOAD_SIZE};/" /etc/nginx/nginx.conf

  grep '^php_value\[post_max_size\]' /etc/php5/fpm/pool.d/www.conf || echo "php_value[post_max_size] = ${MAX_UPLOAD_SIZE}" >> /etc/php5/fpm/pool.d/www.conf
  grep '^php_value\[upload_max_filesize\]' /etc/php5/fpm/pool.d/www.conf || echo "php_value[upload_max_filesize] = ${MAX_UPLOAD_SIZE}" >> /etc/php5/fpm/pool.d/www.conf
}

# TODO can be moved to Dockerfile
function fix-raw-post-data () {
  grep '^always_populate_raw_post_data' /etc/php5/fpm/php.ini || echo "always_populate_raw_post_data = -1" >> /etc/php5/fpm/php.ini
  grep '^always_populate_raw_post_data' /etc/php5/cli/php.ini || echo "always_populate_raw_post_data = -1" >> /etc/php5/cli/php.ini
}

# TODO can be moved to Dockerfile
function fix-clear_env () {
  grep '^clear_env' /etc/php5/fpm/php-fpm.conf || echo "clear_env = no" >> /etc/php5/fpm/php-fpm.conf
}

# TODO can be moved to Dockerfile
function fix-apc-enable_cli () {
  grep '^apc.enable_fpm = 1' /etc/php5/fpm/php.ini || echo "apc.enable_fpm = 1" >> /etc/php5/fpm/php.ini
  grep '^apc.enable_cli = 1' /etc/php5/cli/php.ini || echo "apc.enable_cli = 1" >> /etc/php5/cli/php.ini
}

function install-and-upgrade () {
  sleep 5
  occ | grep 'maintenance:install' && occ maintenance:install \
      --database "${DB_TYPE}" \
      --database-name "${DB_NAME}" \
      --database-host "${DB_HOST}" \
      --database-user "${DB_USER}" \
      --database-pass "${DB_PASS}" \
      --database-table-prefix "${DB_TABLE_PREFIX}" \
      --admin-user "${ADMIN_USER}" \
      --admin-pass "${ADMIN_PASS}" \
      --data-dir "${DATA_DIR}"

  occ upgrade
}

function create-docker-config () {
  cat > "${DOCKER_OWNCLOUD_CONFIG}" <<-EOF
<?php
\$CONFIG['dbtype'] = '${DB_TYPE}';
\$CONFIG['dbname'] = '${DB_NAME}';
\$CONFIG['dbuser'] = '${DB_USER}';
\$CONFIG['dbpassword'] = '${DB_PASS}';
\$CONFIG['dbhost'] = '${DB_HOST}';
\$CONFIG['dbtableprefix'] = '${DB_TABLE_PREFIX}';

\$defaultPreviewProviders = array(
  'OC\Preview\PNG',
  'OC\Preview\JPEG',
  'OC\Preview\GIF',
  'OC\Preview\BMP',
  'OC\Preview\XBitmap',
  'OC\Preview\MP3',
  'OC\Preview\TXT',
  'OC\Preview\MarkDown',

  'OC\Preview\Movie',
  'OC\Preview\MSOfficeDoc',
  'OC\Preview\MSOffice2003',
  'OC\Preview\MSOffice2007',
  'OC\Preview\OpenDocument',
  'OC\Preview\StarOffice',
);

\$allPreviewProviders = array_merge(\$defaultPreviewProviders, array(
  'OC\Preview\Illustrator',
  'OC\Preview\Movie',
  'OC\Preview\MSOffice2003',
  'OC\Preview\MSOffice2007',
  'OC\Preview\MSOfficeDoc',
  'OC\Preview\OpenDocument',
  'OC\Preview\PDF',
  'OC\Preview\Photoshop',
  'OC\Preview\Postscript',
  'OC\Preview\StarOffice',
  'OC\Preview\SVG',
  'OC\Preview\TIFF',
  'OC\Preview\Font',
));
\$CONFIG['enabledPreviewProviders'] = \$defaultPreviewProviders;
EOF

  if [ $ENABLE_EXTRA_PREVIEW_PROVIDERS = true ]; then
    sed -i "s/\$CONFIG\['enabledPreviewProviders'] =.*;/\$CONFIG['enabledPreviewProviders'] = \$allPreviewProviders;/" "${DOCKER_OWNCLOUD_CONFIG}"
  fi
}

function modify-trusted-domains () {
  [ -z ${TRUSTED_DOMAIN} ] && return

  cat >> "${DOCKER_OWNCLOUD_CONFIG}" <<-EOF
\$trusted_domains = array('${TRUSTED_DOMAIN}');
if (array_key_exists('trusted_domains', \$CONFIG)) {
  \$CONFIG['trusted_domains'] = array_merge(\$CONFIG['trusted_domains'], \$trusted_domains);
} else {
  \$CONFIG['trusted_domains'] = \$trusted_domains;
}
EOF
}

function include-docker-config () {
  grep "${DOCKER_OWNCLOUD_CONFIG}" "${OWNCLOUD_CONFIG}" || echo "include('${DOCKER_OWNCLOUD_CONFIG}');" >> "${OWNCLOUD_CONFIG}"
}

function download-owncloud-certs () {
  OWNCLOUD_CERTFILE="/var/www/owncloud/config/ca-bundle.crt"
  [ -f "${OWNCLOUD_CERTFILE}" ] && return
  curl --output "${OWNCLOUD_CERTFILE}" https://raw.githubusercontent.com/owncloud/core/v${OWNCLOUD_VERSION}/config/ca-bundle.crt
}

function fix-permissions () {
  chown -R www-data:www-data /var/www/owncloud
}

main "$@"
